{
  "name": "hapi-auth-basic",
  "description": "Basic authentication plugin",
  "version": "2.0.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/hapi-auth-basic"
  },
  "main": "index",
  "keywords": [
    "hapi",
    "plugin",
    "auth",
    "basic"
  ],
  "engines": {
    "node": ">=0.10.32"
  },
  "dependencies": {
    "boom": "2.x.x",
    "hoek": "2.x.x"
  },
  "peerDependencies": {
    "hapi": ">=8.x.x"
  },
  "devDependencies": {
    "code": "1.x.x",
    "hapi": "8.x.x",
    "lab": "5.x.x"
  },
  "scripts": {
    "test": "make test-cov"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/hapijs/hapi-auth-basic/raw/master/LICENSE"
    }
  ],
  "readme": "### hapi-auth-basic\n\n[![Build Status](https://secure.travis-ci.org/hapijs/hapi-auth-basic.png)](http://travis-ci.org/hapijs/hapi-auth-basic)\n\nLead Maintainer: [Eran Hammer](https://github.com/hueniverse)\n\nBasic authentication requires validating a username and password combination. The `'basic'` scheme takes the following options:\n\n- `validateFunc` - (required) a user lookup and password validation function with the signature `function(username, password, callback)` where:\n    - `username` - the username received from the client.\n    - `password` - the password received from the client.\n    - `callback` - a callback function with the signature `function(err, isValid, credentials)` where:\n        - `err` - an internal error.\n        - `isValid` - `true` if both the username was found and the password matched, otherwise `false`.\n        - `credentials` - a credentials object passed back to the application in `request.auth.credentials`. Typically, `credentials` are only\n          included when `isValid` is `true`, but there are cases when the application needs to know who tried to authenticate even when it fails\n          (e.g. with authentication mode `'try'`).\n- `allowEmptyUsername` - (optional) if `true`, allows making requests with an empty username. Defaults to `false`.\n\n```javascript\nvar Bcrypt = require('bcrypt');\n\nvar users = {\n    john: {\n        username: 'john',\n        password: '$2a$10$iqJSHD.BGr0E2IxQwYgJmeP3NvhPrXAeLSaGCj6IR/XU5QtjVu5Tm',   // 'secret'\n        name: 'John Doe',\n        id: '2133d32a'\n    }\n};\n\nvar validate = function (username, password, callback) {\n\n    var user = users[username];\n    if (!user) {\n        return callback(null, false);\n    }\n\n    Bcrypt.compare(password, user.password, function (err, isValid) {\n\n        callback(err, isValid, { id: user.id, name: user.name });\n    });\n};\n\nserver.register(require('hapi-auth-basic'), function (err) {\n\n    server.auth.strategy('simple', 'basic', { validateFunc: validate });\n    server.route({ method: 'GET', path: '/', config: { auth: 'simple' } });\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hapijs/hapi-auth-basic/issues"
  },
  "_id": "hapi-auth-basic@2.0.0",
  "dist": {
    "shasum": "64b42a5e8c8059e8d548d26e6a77ba8d5748390d"
  },
  "_from": "hapi-auth-basic@",
  "_resolved": "https://registry.npmjs.org/hapi-auth-basic/-/hapi-auth-basic-2.0.0.tgz"
}
